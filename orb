#!/bin/bash
function _orb_init() {
	_orb_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )
	source "$_orb_dir/core/globals/orb_init.sh"

	local _file; for _file in "${_core_dependencies[@]}"; do
		source "$_orb_dir/$_file"
	done

	_collect_orb_extensions
	_parse_env_extensions

	_echoerr ${_orb_extensions[@]}
}


function orb() {
	# Previous function declarations are dumped and then restored after call.
	# This makes sure any new declarations wont override existing functions in parent scope,
	# which removes the need of sourcing and running functions in a subshell,
	# which allows for exporting and modifying variables in parent scope
	# Just use local variable prefix when needed
	local _function_dump="$(declare -f)"

	# Set globals
	local _file; for _file in "${_core_globals[@]}"; do
		source "$_orb_dir/$_file"
	done

	# Source namespace wrapper
	if [[ -f "$_namespace_dir/_${_current_namespace}.sh" ]]; then
		source "$_namespace_dir/_${_current_namespace}.sh"
	fi

	_collect_namespace_files
	_handle_help_requested && exit 0


	# Source file with if has public function
	local _file; for _file in ${_namespace_files[@]}; do
		if _has_public_function "$_function_name" "$_file"; then
			_file_with_function="$_file"
			source "$_file"
			break
		fi
	done

	_handle_public_function_missing

	# Parse function args
	if $_direct_call; then
		$_function_name "$@"
		exit $?
	elif [[ $1 == "--help" ]]; then
		_print_function_help
		exit 0
	else
		_parse_args "$@"
	fi

	# Call function
	$_function_name "${_args_nrs[@]}" "${_args_wildcard[@]}"
	_function_exit_code=$?

	# Restore functions
	eval "$_function_dump"

	return $_function_exit_code
}

_orb_init
orb "$@"
