#!/bin/bash
_orb_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )
_scripts=( git utils text ) # otherwise defaults to orb

function orb() {
	# Overriding nested orb calls with internal function to access caller info in utils
	# Run nested calls in subshell to prevent changing parent environment
	(
		_core_script_dependencies=(
			scripts/utils/dev.sh
			scripts/text/format.sh
			scripts/utils/core.sh
		)

		_core_dependencies=(
			core/helpers/bootstrap.sh
			core/helpers/help.sh
			core/helpers/arguments.sh
			core/globals/caller.sh
			core/globals/script.sh
		)

		_deps=( ${_core_script_dependencies[@]} ${_core_dependencies[@]} )
		for _file in "${_deps[@]}"; do
			source "$_orb_dir/$_file"
		done; unset _file _deps

		# Source user script extension
		if _current_script_extension=$(_get_current_script_extension); then
			source "$_current_script_extension"
		fi
		# Source main script file
		_current_script_dependencies=()
		if [[ -f "$_script_dir/_${_script_name}.sh" ]]; then
			source "$_script_dir/_${_script_name}.sh"
		fi
		# If function not present yet source internal script files
		if ! function_exists $_function_name; then
			for _file in ${_current_script_dependencies[@]}; do
				source "$_script_dir/${_file}"
			done; unset _file
		fi

		_handle_function_is_missing_or_help

		# Parse function args
		if [[ $1 == "help" ]]; then
			_print_function_help
			exit 0
		else
			_parse_args "$@"
		fi

		_unset_redundant_script_functions # effectively enforcing orb prefix

		# Call function in another subshell to prevent meddeling with orb internals
		( $_function_name "${_args_nrs[@]}" "${_args_wildcard[@]}" )
	)
}

orb "$@"
