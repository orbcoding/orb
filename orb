#!/bin/bash
orb_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )

function orb() {
	# Overriding nested orb calls with internal function to access caller info in utils
	# Run nested calls in subshell to prevent changing parent environment
	(
		_core_script_dependencies=(
			scripts/utils/dev.sh
			scripts/text/format.sh
			scripts/utils/core.sh
		)

		_core_dependencies=(
			core/helpers/help.sh
			core/arguments_collector.sh
			core/globals/caller.sh
			core/globals/script.sh
			core/globals/arguments.sh
			core/script_file_sourcer.sh
			core/helpers/bootstrap.sh
		)

		_deps=( ${_core_script_dependencies[@]} ${_core_dependencies[@]} )
		for _file in "${_deps[@]}"; do
			source "$orb_dir/$_file"
		done


		_handle_function_is_missing_or_help

		# Parse function args
		if [[ $1 == "help" ]]; then
			_print_function_help
			exit 0
		else
			_parse_args "$@"
		fi

		# Effectively enforcing orb prefix
		_unset_all_internal_utils
		_unset_all_underscored

		# Re source user script extension to allow internal function calls without orb prefix
		if [[ -n $_orb_extensions && -f $_orb_extensions/${script_name}.sh ]]; then
			source "$_orb_extensions/${script_name}.sh"
		fi

		# Call function in another subshell to prevent meddeling with orb internals
		( $function_name "${args_nrs[@]}" "${args_wildcard[@]}" )
	)
}

orb "$@"
